// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package xrossover

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameObjectWrapper struct {
	_tab flatbuffers.Table
}

func GetRootAsGameObjectWrapper(buf []byte, offset flatbuffers.UOffsetT) *GameObjectWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameObjectWrapper{}
	x.Init(buf, n+offset)
	return x
}

func FinishGameObjectWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGameObjectWrapper(buf []byte, offset flatbuffers.UOffsetT) *GameObjectWrapper {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GameObjectWrapper{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGameObjectWrapperBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GameObjectWrapper) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameObjectWrapper) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GameObjectWrapper) ObjectType() GameObjectUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return GameObjectUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GameObjectWrapper) MutateObjectType(n GameObjectUnion) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *GameObjectWrapper) Object(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func GameObjectWrapperStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GameObjectWrapperAddObjectType(builder *flatbuffers.Builder, objectType GameObjectUnion) {
	builder.PrependByteSlot(0, byte(objectType), 0)
}
func GameObjectWrapperAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(object), 0)
}
func GameObjectWrapperEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
